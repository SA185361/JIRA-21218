

DROP Table IF Exists #SecurityT
DROP Table IF Exists #DATA_LINE
DROP Table IF Exists vision.##DATALINE2


CREATE TABLE #SecurityT (
 RowID int IDENTITY(1, 1),
  ID int,
 [Name] varchar(500)
)
DECLARE @NumberRecords int, @RowCount int
DECLARE @ID int, @NAME varchar(200)


INSERT INTO #SecurityT (ID,Name)
	SELECT
		ID, NAME
	FROM vision.SECURITY_TENANT
	WHERE shared = 0;

SET @NumberRecords = @@rowcount
SET @RowCount = 1

Create Table #DATA_LINE 
(
   
	[DESCRIPTION] [nvarchar](30) NULL,
	[PRCNT] [smallint] NULL,
	[TOTAL] [int] NULL,
	[THRESHOLD] [int] NULL,
	[DOWN] [int] NULL,
	[OBJECT_LINK] [int] NULL,
	[THRESHOLD_PERCENT] [smallint] NULL,
	[TENANT_ID] [numeric](19, 0) NOT NULL,
	[DELETED] [char](1) NOT NULL,
	[VERSION] [int] NOT NULL
	)


Insert into #DATA_LINE 
([DESCRIPTION]
,[PRCNT]
,[TOTAL]
,[THRESHOLD]
,[DOWN]
,[OBJECT_LINK]
,[THRESHOLD_PERCENT]
,[TENANT_ID]
,[DELETED]
,[VERSION])
Select 
 [DESCRIPTION]
,[PRCNT]
,[TOTAL]
,[THRESHOLD]
,[DOWN]
,[OBJECT_LINK]
,[THRESHOLD_PERCENT]
,[TENANT_ID]
,[DELETED]
,[VERSION]
from vision.DATA_LINE 
where Tenant_id = 0
and deleted = 'N';  --- EDIT this to Y or N based on Carissa Confirmation


DECLARE @sql varchar(8000);
Declare @LINK int;
Select @LINK = max(link) + 1 from  vision.DATA_LINE 
print @LINK

SET @sql = '
CREATE TABLE vision.##DATALINE2(
	[LINK] [int] Identity (' + CAST(@link AS varchar(15)) + ',1) NOT NULL,
   [DESCRIPTION] [nvarchar](30) NULL,
	[PRCNT] [smallint] NULL,
	[TOTAL] [int] NULL,
	[THRESHOLD] [int] NULL,
	[DOWN] [int] NULL,
	[OBJECT_LINK] [int] NULL,
	[THRESHOLD_PERCENT] [smallint] NULL,
	[TENANT_ID] [numeric](19, 0) NOT NULL,
	[DELETED] [char](1) NOT NULL,
	[VERSION] [int] NOT NULL)

	';

EXEC (@sql);


WHILE @RowCount <= @NumberRecords

BEGIN
SELECT
@ID = ID
FROM #SecurityT
WHERE RowID = @RowCount


Insert into vision.##DATALINE2
( 
 DESCRIPTION
,PRCNT
,TOTAL
,THRESHOLD
,DOWN
,OBJECT_LINK
,THRESHOLD_PERCENT
,TENANT_ID
,DELETED
,VERSION
)
Select 
DESCRIPTION
,PRCNT
,TOTAL
,THRESHOLD
,DOWN
,OBJECT_LINK
,THRESHOLD_PERCENT
,@ID
,DELETED
,VERSION
from  #DATA_LINE

SET @RowCount = @RowCount + 1
END

GO


 ---select * from vision.##dataline2





--  Select * from [VISION].[DATA_LINE]

-- DBCC CHECKIDENT('vision.DATA_LINE_Test')

-- DBCC CHECKIDENT('vision.DATA_LINE_Test',reseed,15)



--      Select 596 * 14
--      FINAL Total: 8344


--  DELETE from Vision.DATA_LINE_test

----  Select count(*) from [VISION].[DATA_LINE_Test]

--Select * from [VISION].[DATA_LINE_Test]
--where TENANT_ID =1 

use [PUT_UR_DB_NAME_HERE]

DECLARE @REPLICATION_SQL_SERVER_DATABASE_NAME VARCHAR(1000)
DECLARE @REPLICATION_SQL_SERVER_SCHEMA_NAME VARCHAR(500)
DECLARE @REPLICATION_SQL_SERVER_TABLE_NAME VARCHAR(500)

SET @REPLICATION_SQL_SERVER_DATABASE_NAME = 'PUT_UR_DB_NAME_HERE' --<$(varCOMMONDB)> -- USE SQL SERVER DATABSE NAME HERE
SET @REPLICATION_SQL_SERVER_SCHEMA_NAME = 'Vision' -- USE SQL SERVER DB SCHEMA NAME HERE
SET @REPLICATION_SQL_SERVER_TABLE_NAME = 'PUT_UR_FINAL_SOURCE_TABLE_NAME_HERE'


/* **************************************************************************************** */
/* ******************* SCRIPT RUN FOR TABLE DATA_LINE ********************* */
/* **************************************************************************************** */

BEGIN TRY
	BEGIN TRANSACTION INSERT_DATA_LINE
	ALTER TABLE VISION.DATA_LINE NOCHECK CONSTRAINT ALL /* DISABLE ALL TABLE CONSTRAINTS */
	BEGIN /* INSERTING RECORD */
		DECLARE @SQL_INSERT_DATA_LINE VARCHAR(MAX)
		SET @SQL_INSERT_DATA_LINE = '
		BEGIN
		DECLARE
			@LINK   INT   ,
			@DESCRIPTION   varchar (30)  ,
			@PRCNT   smallint   ,
			@TOTAL   int   ,
			@THRESHOLD   int   ,
			@DOWN   int   ,
			@OBJECT_LINK   int   ,
			@THRESHOLD_PERCENT   smallint   ,
			@TENANT_ID   numeric (19, 0)  ,
			@DELETED   char (1)  ,
			@VERSION   int

			DECLARE insert_cursor CURSOR FOR
			SELECT LINK,DESCRIPTION,PRCNT,TOTAL,THRESHOLD,DOWN,OBJECT_LINK,THRESHOLD_PERCENT,TENANT_ID,DELETED,VERSION
			FROM '+ @REPLICATION_SQL_SERVER_DATABASE_NAME + '.' + @REPLICATION_SQL_SERVER_SCHEMA_NAME + '.' + @REPLICATION_SQL_SERVER_TABLE_NAME + '
			OPEN insert_cursor
			FETCH NEXT FROM insert_cursor into @LINK,@DESCRIPTION,@PRCNT,@TOTAL,@THRESHOLD,@DOWN,@OBJECT_LINK,@THRESHOLD_PERCENT,@TENANT_ID,@DELETED,@VERSION

			WHILE @@FETCH_STATUS=0
			BEGIN
					BEGIN
						INSERT INTO '+ @REPLICATION_SQL_SERVER_DATABASE_NAME + '.' + @REPLICATION_SQL_SERVER_SCHEMA_NAME + '.DATA_LINE ( LINK,DESCRIPTION,PRCNT,TOTAL,THRESHOLD,DOWN,OBJECT_LINK,THRESHOLD_PERCENT,TENANT_ID,DELETED,VERSION )
						SELECT @LINK,@DESCRIPTION,@PRCNT,@TOTAL,@THRESHOLD,@DOWN,@OBJECT_LINK,@THRESHOLD_PERCENT,@TENANT_ID,@DELETED,@VERSION
					END
				FETCH NEXT FROM insert_cursor into @LINK,@DESCRIPTION,@PRCNT,@TOTAL,@THRESHOLD,@DOWN,@OBJECT_LINK,@THRESHOLD_PERCENT,@TENANT_ID,@DELETED,@VERSION
			END
			CLOSE insert_cursoR
			Deallocate insert_cursor
		END'
EXEC (@SQL_INSERT_DATA_LINE)
--select @SQL_INSERT_DATA_LINE

ALTER TABLE VISION.DATA_LINE CHECK CONSTRAINT ALL /* Enable all table constraints */
END

COMMIT TRANSACTION INSERT_DATA_LINE
SELECT 'TRANSACTION HAS BEEN RUN SUCCESSFULLY FOR INSERT_DATA_LINE' AS TRANSACTION_STATUS
END TRY
BEGIN CATCH
-- Transaction uncommittable
IF @@TRANCOUNT > 0
ROLLBACK TRANSACTION INSERT_DATA_LINE
SELECT 'TRANSACTION HAS BEEN FAIL FOR INSERT_DATA_LINE' AS TRANSACTION_STATUS , ERROR_MESSAGE() 'ERROR_MESSAGE'
END CATCH








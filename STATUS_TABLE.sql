


CREATE TABLE #SecurityT (
 RowID int IDENTITY(1, 1),
  ID int,
 [Name] varchar(500)
)
DECLARE @NumberRecords int, @RowCount int
DECLARE @ID int, @NAME varchar(200)


INSERT INTO #SecurityT (ID,Name)
	SELECT
		ID, NAME
	FROM vision.SECURITY_TENANT
	WHERE shared = 0;

SET @NumberRecords = @@rowcount
SET @RowCount = 1

Create Table #STATUS_TABLE1 
(
[NAME] [nvarchar](120) NULL,
	[LENGTH] [smallint] NULL,
	[STATUS_TYPE] [smallint] NULL,
	[STATUS_POSITION] [smallint] NULL,
	[DATE_FORMAT] [smallint] NULL,
	[DATE_POSITION] [smallint] NULL,
	[TIME_POSITION] [smallint] NULL,
	[DEFINED] [smallint] NULL,
	[TENANT_ID] [numeric](19, 0) NOT NULL,
	[DELETED] [char](1) NOT NULL,
	[VERSION] [int] NOT NULL
)


Insert into #STATUS_TABLE1 
(
[NAME]
           ,[LENGTH]
           ,[STATUS_TYPE]
           ,[STATUS_POSITION]
           ,[DATE_FORMAT]
           ,[DATE_POSITION]
           ,[TIME_POSITION]
           ,[DEFINED]
           ,[TENANT_ID]
           ,[DELETED]
           ,[VERSION] )
Select 
[NAME]
           ,[LENGTH]
           ,[STATUS_TYPE]
           ,[STATUS_POSITION]
           ,[DATE_FORMAT]
           ,[DATE_POSITION]
           ,[TIME_POSITION]
           ,[DEFINED]
           ,[TENANT_ID]
           ,[DELETED]
           ,[VERSION]
from vision.STATUS_TABLE 
where Tenant_id = 0
and deleted = 'N';  --- EDIT this to Y or N based on Carissa Confirmation


DECLARE @sql varchar(8000);
Declare @LINK int;
Select @LINK = max(link) + 1 from  vision.STATUS_TABLE
print @LINK

SET @sql = '
CREATE TABLE vision.##STATUS_TABLE2(
	[LINK] [int] Identity (' + CAST(@link AS varchar(15)) + ',1) NOT NULL,
   [NAME] [nvarchar](120) NULL,
	[LENGTH] [smallint] NULL,
	[STATUS_TYPE] [smallint] NULL,
	[STATUS_POSITION] [smallint] NULL,
	[DATE_FORMAT] [smallint] NULL,
	[DATE_POSITION] [smallint] NULL,
	[TIME_POSITION] [smallint] NULL,
	[DEFINED] [smallint] NULL,
	[TENANT_ID] [numeric](19, 0) NOT NULL,
	[DELETED] [char](1) NOT NULL,
	[VERSION] [int] NOT NULL)

	';

EXEC (@sql);

WHILE @RowCount <= @NumberRecords

BEGIN
SELECT
@ID = ID
FROM #SecurityT
WHERE RowID = @RowCount


Insert into vision.##STATUS_TABLE2
(
[NAME]
,[LENGTH]
,[STATUS_TYPE]
,[STATUS_POSITION]
,[DATE_FORMAT]
,[DATE_POSITION]
,[TIME_POSITION]
,[DEFINED]
,[TENANT_ID]
,[DELETED]
,[VERSION])
Select 
[NAME]
,[LENGTH]
,[STATUS_TYPE]
,[STATUS_POSITION]
,[DATE_FORMAT]
,[DATE_POSITION]
,[TIME_POSITION]
,[DEFINED]
,@Id
,[DELETED]
,[VERSION]
from  #STATUS_TABLE1

SET @RowCount = @RowCount + 1
END

Select * from [VISION].##STATUS_TABLE2

DROP TABLE #SecurityT
Drop Table #STATUS_TABLE1 
DROP Table if exists vision.##STATUS_TABLE2


GO

-- Select * from [VISION].[STATUS_TABLE]

-- DBCC CHECKIDENT('vision.STATUS_TABLE_Test')

-- DBCC CHECKIDENT('vision.STATUS_TABLE_Test',reseed,365)



--      Select 596 * 34
--      FINAL Total: 20264


--  DELETE from Vision.STATUS_TABLE_test

--  Select count(*) from [VISION].[STATUS_TABLE_Test]

--Select * from [VISION].[STATUS_TABLE_Test]
--where TENANT_ID =1 

use [PUT_UR_DB_NAME_HERE]

DECLARE @REPLICATION_SQL_SERVER_DATABASE_NAME VARCHAR(1000)
DECLARE @REPLICATION_SQL_SERVER_SCHEMA_NAME VARCHAR(500)
DECLARE @REPLICATION_SQL_SERVER_TABLE_NAME VARCHAR(500)

SET @REPLICATION_SQL_SERVER_DATABASE_NAME = 'PUT_UR_DB_NAME_HERE' --<$(varCOMMONDB)> -- USE SQL SERVER DATABSE NAME HERE
SET @REPLICATION_SQL_SERVER_SCHEMA_NAME = 'Vision' -- USE SQL SERVER DB SCHEMA NAME HERE
SET @REPLICATION_SQL_SERVER_TABLE_NAME = 'PUT_UR_FINAL_SOURCE_TABLE_NAME_HERE'


/* **************************************************************************************** */
/* ******************* SCRIPT RUN FOR TABLE STATUS_TABLE ********************* */
/* **************************************************************************************** */

BEGIN TRY
	BEGIN TRANSACTION INSERT_STATUS_TABLE
	ALTER TABLE VISION.STATUS_TABLE NOCHECK CONSTRAINT ALL /* DISABLE ALL TABLE CONSTRAINTS */
	BEGIN /* INSERTING RECORD */
		DECLARE @SQL_INSERT_STATUS_TABLE VARCHAR(MAX)
		SET @SQL_INSERT_STATUS_TABLE = '
		BEGIN
		DECLARE
			@NAME nvarchar(30) ,	@LENGTH smallint ,	@STATUS_TYPE smallint ,	@STATUS_POSITION smallint ,	@DATE_FORMAT smallint , @DATE_POSITION smallint ,
			@TIME_POSITION smallint ,@DEFINED smallint , @TENANT_ID numeric(19, 0),	@DELETED char(1),	@VERSION int , @LINK INT 

			DECLARE insert_cursor CURSOR FOR
			SELECT NAME,  LENGTH,  STATUS_TYPE,  STATUS_POSITION,  DATE_FORMAT, DATE_POSITION,  TIME_POSITION,  DEFINED,  TENANT_ID,  DELETED,  VERSION,  LINK 
			FROM '+ @REPLICATION_SQL_SERVER_DATABASE_NAME + '.' + @REPLICATION_SQL_SERVER_SCHEMA_NAME + '.' + @REPLICATION_SQL_SERVER_TABLE_NAME + '
			OPEN insert_cursor
			FETCH NEXT FROM insert_cursor into @NAME ,	@LENGTH, @STATUS_TYPE, @STATUS_POSITION, @DATE_FORMAT, @DATE_POSITION, @TIME_POSITION, @DEFINED, @TENANT_ID, @DELETED,	@VERSION, @LINK 

			SET IDENTITY_INSERT VISION.[STATUS_TABLE] ON    /*  Allows explicit values to be inserted into the identity column of a table   */
			WHILE @@FETCH_STATUS=0
			BEGIN
					BEGIN
						INSERT INTO '+ @REPLICATION_SQL_SERVER_DATABASE_NAME + '.' + @REPLICATION_SQL_SERVER_SCHEMA_NAME + '.STATUS_TABLE (NAME,  LENGTH,  STATUS_TYPE,  STATUS_POSITION,  DATE_FORMAT, DATE_POSITION,  TIME_POSITION,  DEFINED,  TENANT_ID,  DELETED,  VERSION,  LINK )
						SELECT @NAME ,	@LENGTH, @STATUS_TYPE, @STATUS_POSITION, @DATE_FORMAT, @DATE_POSITION, @TIME_POSITION, @DEFINED, @TENANT_ID, @DELETED,	@VERSION, @LINK 
					END
				FETCH NEXT FROM insert_cursor into @NAME ,	@LENGTH, @STATUS_TYPE, @STATUS_POSITION, @DATE_FORMAT, @DATE_POSITION, @TIME_POSITION, @DEFINED, @TENANT_ID, @DELETED,	@VERSION, @LINK 
			END
			CLOSE insert_cursoR
			SET IDENTITY_INSERT VISION.[STATUS_TABLE] OFF
			Deallocate insert_cursor
		END'
EXEC (@SQL_INSERT_STATUS_TABLE)
--select @SQL_INSERT_STATUS_TABLE

ALTER TABLE VISION.STATUS_TABLE CHECK CONSTRAINT ALL /* Enable all table constraints */
END

COMMIT TRANSACTION INSERT_STATUS_TABLE
SELECT 'TRANSACTION HAS BEEN RUN SUCCESSFULLY FOR INSERT_STATUS_TABLE' AS TRANSACTION_STATUS
END TRY
BEGIN CATCH
-- Transaction uncommittable
IF @@TRANCOUNT > 0
ROLLBACK TRANSACTION INSERT_STATUS_TABLE
SELECT 'TRANSACTION HAS BEEN FAIL FOR INSERT_STATUS_TABLE' AS TRANSACTION_STATUS , ERROR_MESSAGE() 'ERROR_MESSAGE'
END CATCH






